import cv2
import numpy as np
import tkinter as tk
from PIL import Image, ImageTk
import time


class BottleFlipApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Bottle Flipping Test")

        # Create a canvas to display the video
        self.canvas = tk.Canvas(root, width=640, height=480)
        self.canvas.pack()

        self.next_button = tk.Button(root, text="Next", command=self.reset_detection)
        self.next_button.pack(pady=10)
        self.next_button.pack_forget()

        # Capture video from the webcam
        self.cap = cv2.VideoCapture(0)

        # HSV color range for green (adjust based on the bottle cap color)
        self.lower_color = np.array([35, 100, 100])  # Example range for green
        self.upper_color = np.array([85, 255, 255])

        # State variables
        self.flip_detected = False
        self.start_time = None  # Timer to track when the flip was detected

        # Start updating frames
        self.update_frame()

        # Close the app cleanly
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)


    def reset_detection(self):
        """Reset the detection state to allow analyzing the contour area again."""
        self.flip_detected = False
        self.start_time = None
        self.next_button.pack_forget() 


    def detect_bottle_flip(self, frame):
        """Detect if a bottle flip is occurring and the bottle is stable."""
        # Convert the frame to HSV
        hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # Create a mask for the green bottle cap
        mask = cv2.inRange(hsv_frame, self.lower_color, self.upper_color)

        # Debug: Show the mask in a separate window
        cv2.imshow("Mask", mask)

        # Find contours in the mask
        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        if contours:
            # Get the largest contour
            largest_contour = max(contours, key=cv2.contourArea)
            area = cv2.contourArea(largest_contour)

            # Debug: Print the area of the largest contour
            print(f"Contour Area: {area}")

            # Check if the area is within the expected range
            if 500 < area < 3000:  # Adjust thresholds as needed
                return True
        return False

    def update_frame(self):
        ret, frame = self.cap.read()
        if ret:
            if not self.flip_detected:
                # Detect bottle flip
                if self.detect_bottle_flip(frame):
                    if self.start_time is None:
                        self.start_time = time.time()  # Start the timer

                    # Check if 2 seconds have passed since the flip was detected
                    if time.time() - self.start_time >= 2:
                        self.flip_detected = True  # Confirm the flip
                        self.start_time = None  # Reset the timer
                else:
                    self.start_time = None  # Reset timer if no flip detected
            else:
                # Show the result after a successful flip
                cv2.putText(
                    frame,
                    "Bottle Flip Successful!",
                    (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    1,
                    (0, 255, 0),
                    2,
                )
                self.next_button.pack()

            # Convert the frame to RGB for Tkinter
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame)
            imgtk = ImageTk.PhotoImage(image=img)

            # Display the frame on the canvas
            self.canvas.create_image(0, 0, anchor=tk.NW, image=imgtk)
            self.canvas.image = imgtk

        # Update the frame every 10 ms
        self.root.after(10, self.update_frame)

    def on_closing(self):
        self.cap.release()
        cv2.destroyAllWindows()  # Close all OpenCV windows
        self.root.destroy()
        
# Main application
if __name__ == "__main__":
    root = tk.Tk()
    app = BottleFlipApp(root)
    root.mainloop()
